import "trait" use Dim

def array[N: Dim, T](a: []T): [N]T = undefined

def concat[M: Dim, N: Dim, T](a: [M]T, b: [N]T): [M + N]T = undefined

def for[N: Dim, T, F: N -> T](f: F): [N]T = undefined

def map[N: Dim, T, U, F: T -> U](a: [N]T, f: F): [N]U = undefined

def max[N: Dim](a: [N]Float): Float = undefined

def matrix[M: Dim, N: Dim, T](a: [][]T): [M * N]T = undefined

def range(n: Int): []Int = undefined

def reshape[M: Dim, N: Dim, T](a: [N]T): [M]T = undefined

def row[M: Dim, N: Dim, T](a: [M * N]T, i: M): [N]T = undefined

def scan[T, U, F: T * U -> T](x: T, a: []U, f: F): []T = undefined

def slice[T](a: []T, i: Int, j: Int): []T = undefined

def stack[M: Dim, N: Dim, T](a: [M][N]T): [M * N]T = undefined

def sum[N: Dim](a: [N]Float): Float = undefined

def transpose[M: Dim, N: Dim, T](a: [M * N]T): [N * M]T = undefined

def zeros[N: Dim](): [N]Float = undefined
